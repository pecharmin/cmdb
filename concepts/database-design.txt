Database Design
===============
The logical table structure of the CMDB is defined here.
You also find a short concept how the fields should be used.

* All data expect references, roles, permissions, tags and options are
  objects! Tags and options are only references to objects.
* Use PostgreSQL because they have MVCC and recursive queries and
  schemas and cool SQL function syntax.


### CMDB Core (.cmdb.core) ###

The CMDB 'core' schema stores the user's data in objects and
internal application options.


Entity relationship model
=========================

                   +------ 1:1 ---->  tags
    references_\   |
    archive        | +--- 1:1 -->  options
                   | |
      ^   ^        | |  +--------------- 1:1 ----------------+
      |   |        | |  |                                    |
      |  n:m       v v  v                                    |
      |   |                                                  |
      |   +----->  objects  <-+-- 1:n -->  objects_archive   |
  +---+   |                                                  |
  |      n:m       ^   ^                      ^   ^          |
  |       |      +-+   |                      |   |          |
  |       v      |     |               +------+  n:1         |
  |              |    1:1              |          |          |
  |  references  |     |               |       +--+          |
  |              |     +-+   +-- 1:n --+       |             |
  |       ^      |       |   |                 |  +----------+
  |       |      |       |   |                 |  |
  |       |     1:n      v   v                 v  v
  |       |      |
  |       |      |   permissions  <-- 1:1 -->  roles  <--+- 1:n -+
  |       |      |                                       |       |
  |       |      |         ^                   ^  ^     1:n      v
  |       |      +---+     |                   |  |      |
  |       |          |    1:n   +----- n:1 ----+  |      |    roles_\
  |       |          |     |    |                 |      |    membership_\
  |       |          v     v    v                 |      |    archive
  |       |                                       |      v
  |       |       permissions_archive             |
  |       |                                       |   roles_\
  +-------+-------------- n:1 --------------------+   membership

* Read the relation for vertical relation arrows from left to right
  for top and bottom.



About archiving tables
======================
The archive tables stores sensible data for versioning or auditing.

Advantages:
* Logical separation between current and old data.
* Performance improvements when accessing current data (which will be done
  the most time) cause of slim live tables.

Disadvantages:
* Complex data management.
* Joins over two tables to get version information.



objects -- Stores all data in objects
=======
id			bigint		not null	PK	serial
value			bytea		null
value_type		enum(Types)	not null
name			varchar(120)	null
version			integer		not null
mtime			datetime	not null
locked_by_role_id	integer		null		FK roles (id)

Types: object, integer, double, text, blob

* The objects table stores tree objects and data attributes.

* A object is unique identifiable by it's id.
* A tree object is identified by value_type = 'object'.
* In reverse, a attribute is of another type of value_type, not 'object'.
* The name column sets the name (non unique) of an attribute.
* The version field displayes how often the object has been modified.
* The mtime column saves the timestamp of last modification.
* If the locked_by_role_id is set in an object, it is locked for a role
  and can not be modified by others.

* When a object is inserted the id, value_type and mtime is copied with a
  version number of 0 to the objects_archive table. The role id of the
  author is set there in the modified_by_role_id column.
  The mtime of a entry with a version of 0 is the time of creation.
* If a object is modified it will be copied to the objects_archive table
  before. When saving the object with new data, the value of
  locked_by_role_id is copied to the archive to the modified_by_role_id
  column.
* On object removal the data is copied like on a modification to the
  objects_archive table an after this removed from the objects table.


objects_archive -- Archives modified objects as a history
===============
id			bigint		not null	PK
value			bytea		null
value_type		enum(Types)	not null
name			varchar(120)	null
version			integer		not null	PK
mtime			datetime	not null
modified_by_role_id	integer		not null	FK roles (id)

Types: object, integer, double, text, blob

* Saves the modified objects as history.
  Whenever a object is modified, the row is copied before to this table.

* A row can clearly be identified by the combination of it's id and version
  column.
* The modified_by_role_id column displays the role id of one who created,
  modified or deleted the object.
* The other fields have same meaning as the fields of the objects table.

* The modified_by_role_id column saves in general the role which changed
  the objects data.
* If no row of an entry in the objects_archive table can be found in the
  objects table, it was offically deleted. The entry with the highest
  version is the last snapshot from the objects table. The column
  modified_by_role_id saved then the role id which deleted the object.
* A entry with version number 0 saves the creator of an object.



references -- Links the objects as a tree togehter.
==========
object_id		bigint	 	not null	UI FK objects (id)
referenced_object_id	bigint		null		UI FK objects (id)
reference_type		enum(Types)	not null	UI
version			integer		not null
mtime			datetime	not null
locked_by_role_id	integer		null		FK roles (id)

Types: parent, link

* This tables links the objects with references togehter.
* A reference can be of type parent or link.
* A reference is clearly identifiable the the object id, the
  referenced object id and the reference type. This is ensured by an
  unique index and assures that a object can't have more than one parent or
  linked multiple time for the same use.

* version, mtime and locked_by_role_id are used in the same way like the
  fields of the objects table and also equally handled.


references_archive -- Saves modified object references.
==================
object_id		bigint	 	not null
referenced_object_id	bigint		null
reference_type		enum(Types)	not null
version			integer		not null
mtime			datetime	not null
modified_by_role_id	integer		not null	FK roles (id)

* The tables saves all modified references. 
* A entry can be identified by it's object_id, referenced_object_id,
  reference_type and version.

* The version, mtime and modified_by_role_id fields and their usage are now
  self-explained by their parents ;)



roles -- Defines abstract roles (users and groups) for permission handling.
=====
id			integer		not null	PK	serial
role_type		enum(Roles)	not null
ctime			datetime	not null
created_by_role_id	integer		not null	FK roles (id)

Roles: user, group, system

* The role id is the interface to a used authentication backend which
  stores the user data, see below.

* The column role_type defines the role type, which can be a normal user,
  a group or a system account. System account must not be created by the
  application - there will no function be available for this.
  New roles are also create with ids from a serial > 0 and must be due a
  check contraint > 0.
  Only normal users will be available to login to the cmdb GUI.
* Field ctime saves the create time of a new role.
* The created_by_role_id column saves the id of the role which created the
  new one. The first role is always created by role with id 0 (system).

* Created roles can never be changed after they have been created.
  This nessesary because objects, references and permissions links again
  the role's id as foreign keys.
  If a role needs to be deleted this is done in the authentication backend
  tables like auth.db_users or may auth.ldap_users.
* The first role is the system account for internal data handling (options,
  users, etc.).


roles_membership -- Assigns roles to roles like grouping or user cloning.
================
role_id			integer		not null	PK FK roles (id)
granted_role_id		integer		not null	PK FK roles (id)
gtime			datetime	not null
granted_by_role_id	integer		not null	FK roles (id)

* The roles_membership table grants role privileges to other roles.

* role_id is the role's id to which the privileges of role in
  granted_role_id are granted to.
* The gtime column saves the time a grant has been given.
* Field granted_by_role_id saves the id of the role which granted a role.
* The primary key on role_id and granted_role_id columns ensures that a
  role can not granted multiple times.

* User privileges can be cloned if a user's role is granted to another
  user role -- user privileges cloning.
* If the role in granted_role_id is of role_type 'group' this works
  like grouping.
* Roles of role_type group can also be members of group roles.
* When role membership is added or removed from a role this will be
  recorded in the roles_membership_archive table.


roles_membership_archive -- Audits the role assignments.
========================
role_id			integer		not null	FK roles (id)
granted_role_id		integer		not null	FK roles (id)
gtime			datetime	not null
granted_by_role_id	integer		not null	FK roles (id)
grant_type		enum(Types)	not null 

Types: grant, revoke

* This table stores all assigned role memberships as an audit.
* For field description see roles_membership table above.
* The grant_type column informs if a role was assigned/granted or
  removed/revoked from a role.


permissions -- Grants permissions for objects to roles.
===========
object_id		bigint		not null	PK FK objects (id)
role_id			integer		not null	PK FK roles (id)
permission		smallint	not null
mtime			datetime	not null
granted_by_role_id	integer		not null	FK roles (id)

Permissions:
0 = none (default if no permission exists)
1 = read exclusive
2 = read recursive
3 = write exclusive
4 = write recursive

* The table stores permission levels as small integer values.

* A higher integer values includes lower integer values, with means a
  permission of 2 includes 1 and 0.
* The time a permission was granted is saved in the mtime field.
* The grantee's role id of a permission is stored in granted_by_role_id.

* Permissions are applied may recursive over a object tree or not.
* Permissions can only be overwritten by higher permission levels.
* Exclusive permissions applies only to this special object and are not
  granted recursive over the tree.
* When a permission is set on an object all parent objects will be
  reverse recursive up to the root readable for the user.
* Only the highest available value is checked by the application.
* When a permission is changed, it will be copied with the role_id of the
  user who changed it to the permissions_archive table.


permissions_archive -- Saves the changed permissions as a trace.
===================
object_id	bigint		not null
role_id		integer		not null	FK roles (id)
permission	integer		not null
mtime		datetime	not null
changed_by_role	integer		not null	FK roles (id)

* The permissions audit table traces all changes on the permissions table.
* Alle changes are simply copied to the archive table.



options -- Stores application internal options.
=======
name		varchar(120)	not null	PK
object_id	bigint		not null	FK objects (id)

* The options tables saves a readable reference to program internal used
  objects. Program configuration should not be stores in filesystem.

* The option name is a unique identifier and should be saved dot-notated
  like '.core.object.archive.cleanup-interval'.

* The value for an option is stored in the objects table.
* Options can not be saved complete as objects because there is no human
  readable unique identifier on them.


tags -- Stores human readable unique identifier to objects.
====
name		varchar(120)	not null	PK
object_id	bigint		not null	FK objects (id)

* This tables stores unique human readable identifier as references
  to objects.




\/ TODO later -- non core functions \/

### CMDB Database Auth (.cmdb.core.auth.db) ###

auth_db_users -- Stores user information in the database
=============
role_id		integer		not null	FK core.roles(id)
username	varchar(40)	not null	UI
email		varchar(250)	not null
password	char(128)	null
firstname	varchar(60)	not null
lastname	varchar(60)	not null
last_login	datetime	null
mtime		datetime	not null
...


auth_db_groups -- Storges group information to roles in database
==============
role_id		integer		not null	FK core.roles(id)
groupname	varchar(40)	not null	UI
group_admin_id	integer		not null	FK core.roles(id)
mtime		datetime	not null
...



### CMDB LDAP Auth (.cmdb.core.auth.ldap) ###

TODO
